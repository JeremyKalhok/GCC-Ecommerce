import { React, useState } from 'react'
import './AddProduct.css'
import 'boxicons'

const AddProduct = () => {

  const [image, setImage] = useState(false);
  const [productDetails, setProductDetails] = useState({
    name: "",
    price: "",
    description: "",
    category: "",
    image: "",
  }); // initialize the state to a product object with empty/blank fields

  const imageHandler = (e) => {
    setImage(e.target.files[0]); // set the value of the state equal to the selected file
  };

  const updatedDetails = (e) => {
    setProductDetails({...productDetails,[e.target.name]: e.target.value})
  }; // for each field in the object, it will update the field with the same name as the input field
     // using the value obtained from that input field (e.g. stores the value from product name in the name field)

  const Add_Product = async () => {
    console.log(productDetails);
    let responseData;
    let product = productDetails; // create a copy of product object

    let formData = new FormData(); // creates a set of key/form pairs that can be used as forms in .send() requests
    formData.append('product', image);

    await fetch('https://gcc-ecommerce-backend.onrender.com/upload', { // mimics the backend call in the index.js file
      method: 'POST',                              // that uploads an image to the backend upload folder 
      headers: {                                   // when given a fieldname ('product') and image file name
        Accept: 'application/json',
      },
      body: formData,
    }).then((resp) => resp.json()).then((data) => {responseData = data});
    // when the response is received, apply the .json() method to it, then store that data in responseData
    // so that the success and image_url attributes can be accessed

    if(responseData.success){ // if success attribute is true, POST method was successful, and image was successfully stored using multer
      product.image = responseData.image_url; // set the "image" field of the new product equal to the image url generated by the POST method
      console.log(product);
      await fetch('https://gcc-ecommerce-backend.onrender.com/addproduct', { // send the new product object to the addproduct endpoint to be added to the MongoDB database
        method: 'POST',
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(product), // change the product variable from JSON to a string format to be sent to through the API
      }).then((resp) => resp.json()).then((data) => { // parse the response using .json() then if the new response's success attribute is 
        data.success?alert("Product Added!"):alert("Failed");    // true, send the alert to the screen
      });
    };
  };

  return (
    <div className="add-product">
      <div className="add-product-item-field">
        <p>Product Name</p>
        <input value={productDetails.name} onChange={updatedDetails} type="text" name='name' placeholder='Enter Product Name' />
      </div>
      <div className="add-product-item-field">
        <p>Product Price</p>
        <input value={productDetails.price} onChange={updatedDetails} type="text" name='price' placeholder='Enter Product Price' />
      </div>
      <div className="add-product-item-field">
        <p>Product Description</p>
        <input value={productDetails.description} onChange={updatedDetails} type="text" name='description' placeholder='Enter Product Description' />
      </div>
      <div className="add-product-item-field">
        <p>Product Category</p>
        <select value={productDetails.category} onChange={updatedDetails} name="category" className='add-product-selector' >
          <option value="shells">Shells</option>
          <option value="buttons">Buttons</option>
          <option value="internals">Internals</option>
        </select>
      </div>
      <div>
        <label htmlFor="file-input"> {/* the htmlFor attribute links this label to the input below with id "file-input" */}
          <div className="box-icon">{image?<img src={URL.createObjectURL(image)} alt="" />:<box-icon name='cloud-upload' size="lg"></box-icon>}</div>
        </label> {/* if image state is false, display box-icon, otherwise, display the selected file as an image */}
        <input onChange={imageHandler} type="file" name='image' id='file-input' hidden/> {/* hides the "Choose File" button, giving functionality to the box-icon */}
      </div> {/* calls imageHandler function when a file is selected */}
      <button onClick={() => {Add_Product()}} className="add-product-btn">ADD</button>
    </div>
  )
}

export default AddProduct